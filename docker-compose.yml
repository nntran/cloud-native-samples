services:
  traefik:
    container_name: traefik
    image: traefik:latest
    restart: always
    command:
      - --api=true #added by me
      - --api.dashboard=true #added by me
      - --entrypoints.web.address=:8080
      - --entrypoints.websecure.address=:8043
      - --providers.docker=true
      - --log.level=ERROR
      # - --certificatesresolvers.leresolver.acme.httpchallenge=true
      # - --certificatesresolvers.leresolver.acme.email=MY-EMAIL
      # - --certificatesresolvers.leresolver.acme.storage=/var/acme.json
      # - --certificatesresolvers.leresolver.acme.httpchallenge.entrypoint=web
    ports:
      - "8080:80"
      - "8043:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./acme.json:/acme.json"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.rule=Host(`traefik.dev.local`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      # - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      # - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.dev.local`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/"
    networks:
      - cns-network
  portainer:
    image: portainer/portainer-ce:latest
    restart: always
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    labels:
      # Frontend
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`portainer.dev.local`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=9000"
      - "traefik.http.routers.frontend.service=frontend"
      # - "traefik.http.routers.frontend.tls.certresolver=leresolver"
    networks:
      - cns-network
  product-service:
    container_name: product-service
    build:
      context: ./services/product-service
      dockerfile: Dockerfile
      target: development
      args:
        - GO_VERSION=1.23.3
    ports:
      - "9001:8080"
    environment:
      - SERVER_PORT=8080
      - MONGODB_URI=mongodb://mongodb:27017
      - MONGODB_DATABASE=product
      - REDIS_ADDRESS=redis:6379
      - RABBITMQ_URI=amqp://dev:dev@rabbitmq:5672/
      - RABBITMQ_EXCHANGE=product_exchange
      - AUTH_JWT_SECRET=your-secret-key
      - LOG_LEVEL=debug
    restart: unless-stopped
    networks:
      - cns-network
    depends_on:
      - mongodb
      - redis
      - rabbitmq

  order-service:
    container_name: order-service
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
      target: development
    ports:
      - "9002:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - MONGODB_URI=mongodb://mongodb:27017/order
    volumes:
      - ./services/order-service/src:/opt/app/src
    networks:
      - cns-network
    depends_on:
      - mongodb
      # - redis
      # - rabbitmq

  keycloak:
    container_name: keycloak
    image: ntdtfr/keycloak:26.1.4
    restart: unless-stopped
    env_file:
      - .env
    # environment:
    #   - KEYCLOAK_ADMIN=admin
    #   - KEYCLOAK_ADMIN_PASSWORD=admin
    #   - KC_DB=postgres
    #   - KC_DB_URL_HOST=postgres
    #   - KC_DB_URL_DATABASE=postgres
    #   - KC_DB_USERNAME=postgres
    #   - KC_DB_PASSWORD=password
    ports:
      - 8280:8080
      - 8243:8443
    networks:
      - cns-network
    depends_on:
      - postgres
    labels:
      # Frontend
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`keycloak.dev.local`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=8080"
      - "traefik.http.routers.frontend.service=frontend"
      # - "traefik.http.routers.frontend.tls.certresolver=leresolver"
  postgres:
    container_name: postgres
    image: postgres:13-alpine
    restart: unless-stopped
    env_file:
      - .env
    # environment:
    #   - POSTGRES_HOST=postgres
    #   - POSTGRES_DB=postgres
    #   - POSTGRES_USER=postgres
    #   - POSTGRES_PASSWORD=password
      # - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
      # - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - cns-network

  mongodb:
    image: mongo:6.0
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    networks:
      - cns-network

  redis:
    image: redis:7.0-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cns-network

  metabase:
    image: metabase/metabase:latest
    ports:
      - 3000:3000
    networks:
      - cns-network
    depends_on:
      - postgres
      - mongodb

  rabbitmq:
    image: rabbitmq:3.11-management
    container_name: rabbitmq
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=dev
      - RABBITMQ_DEFAULT_PASS=dev
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - cns-network

volumes:
  portainer_data:
  postgres-data:
  mongodb-data:
  redis_data:
  rabbitmq_data:

networks:
  cns-network:
    name: cloud-native-samples-network
    driver: bridge
