name: Order Service CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ master ]
    tags: [ v* ]
    # paths-ignore:
    #   - '**.md'
    paths:
      - services/order-service/src/**
      - services/order-service/Dockerfile
      - .github/workflows/order-service-ci.yml
  pull_request:
    branches: [ master ]
    # paths-ignore:
    #   - '**.md'
    paths:
      - services/order-service/src/**
      - services/order-service/Dockerfile
      - .github/workflows/order-service-ci.yml

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install npm version 11.3.0 and babel CLI
      run: npm install -g npm@11.3.0 && npm install -g babel-cli

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm run test

    - name: Run linting
      run: npm run lint

    - name: Build application
      run: npm run build

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - uses: actions/checkout@v3

    - name: Run dependency vulnerability check
      run: npm audit --production

    - name: Run SAST scan
      uses: github/codeql-action/analyze@v2
      with:
        languages: javascript

  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ntdtfr/order-service:latest
          ntdtfr/order-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Deploy to production
      run: |
        # Replace with your deployment script or actions
        echo "Deploying to production environment"
        # Add your deployment steps here
