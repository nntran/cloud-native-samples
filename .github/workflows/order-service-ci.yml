name: Order Service CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main ]
    tags: [ v* ]
    # paths-ignore:
    #   - '**.md'
    paths:
      - services/order-service/src/**
      - services/order-service/Dockerfile
      - .github/workflows/order-service-ci.yml
  pull_request:
    branches: [ main ]
    # paths-ignore:
    #   - '**.md'
    paths:
      - services/order-service/src/**
      - services/order-service/Dockerfile
      - .github/workflows/order-service-ci.yml

# Environment variables available to all jobs and steps in this workflow
env:
  SOURCE_DIR: services/order-service
  NODE_VERSION: 22
  DOCKER_IMAGE_NAME: order-service
  DOCKER_TARGET: production
  GITHUB_USER: ${{ secrets.GH_USER }}
  GITHUB_EMAIL: ${{ secrets.GH_EMAIL }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set up K8s tools
      uses: azure/setup-kubectl@v4

    - name: Install Skaffold
      run: |
        curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64
        chmod +x skaffold
        sudo mv skaffold /usr/local/bin
        skaffold config set --global collect-metrics false

    - name: Build
      id: build
      # working-directory: ${{ env.SOURCE_DIR }}
      run: |
        skaffold build -m order-service --default-repo ${{ vars.DOCKERHUB_REPOSITORY }} --file-output=build.json

    # - name: Run Tests
    #   run: skaffold test --file-output=test.json

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build
        path: build.json
        retention-days: 1

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - uses: actions/checkout@v5

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.SOURCE_DIR }}/package-lock.json

    - name: Run dependency vulnerability check
      run: |
        cd ${{ env.SOURCE_DIR }}
        ls -al
        npm audit --production

    # - name: Run SAST scan
    #   uses: github/codeql-action/analyze@v2
    #   with:
    #     languages: javascript

  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
    - uses: actions/checkout@v5

    - name: Prepare
      run: |
        platform=${{ matrix.platform }}
        echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ vars.DOCKERHUB_REPOSITORY }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      id: buildx
      with:
        buildkitd-flags: "--debug"

    - name: Build and push by digest
      id: build
      uses: docker/build-push-action@v6
      with:
        platforms: ${{ matrix.platform }}
        builder: ${{ steps.buildx.outputs.name }}
        context: ${{ env.SOURCE_DIR }}
        file:  ${{ env.SOURCE_DIR }}/Dockerfile
        target: production
        build-args: |
          NODE_VERSION=${{ env.NODE_VERSION }}
          GITHUB_USER=${{ secrets.GH_USER }}
          GITHUB_EMAIL=${{ secrets.GH_EMAIL }}
        tags: |
          ${{ vars.DOCKERHUB_REPOSITORY }}/${{ env.DOCKER_IMAGE_NAME }}
        labels:
          org.opencontainers.image.created=${{ steps.meta.outputs.created }}
          org.opencontainers.image.authors=${{ steps.meta.outputs.authors }}
          org.opencontainers.image.url=${{ steps.meta.outputs.url }}
          org.opencontainers.image.source=${{ steps.meta.outputs.source }}
          org.opencontainers.image.version=${{ steps.meta.outputs.version }}
          org.opencontainers.image.revision=${{ steps.meta.outputs.revision }}
          org.opencontainers.image.licenses=${{ steps.meta.outputs.licenses }}
          org.opencontainers.image.title=Order Service
          org.opencontainers.image.description=Order Service for e-commerce platform
          org.opencontainers.image.vendor=ntdt.fr
          org.opencontainers.image.created=${{ steps.meta.outputs.created }}
          org.opencontainers.image.title=Keycloak
        cache-from: type=gha,scope=build-${{ env.PLATFORM_PAIR }}
        cache-to: type=gha,scope=build-${{ env.PLATFORM_PAIR }}
        outputs: type=image,push-by-digest=true,name-canonical=true,push=true

    - name: Export digest
      run: |
        mkdir -p ${{ runner.temp }}/digests
        digest="${{ steps.build.outputs.digest }}"
        touch "${{ runner.temp }}/digests/${digest#sha256:}"

    - name: Upload digest
      uses: actions/upload-artifact@v4
      with:
        name: digests-${{ env.PLATFORM_PAIR }}
        path: ${{ runner.temp }}/digests/*
        if-no-files-found: error
        retention-days: 1

  docker-merge:
    runs-on: ubuntu-latest
    needs:
      - docker-build-and-push
    steps:
      - name: Download digests
        uses: actions/download-artifact@v5
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKERHUB_REPOSITORY }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ vars.DOCKERHUB_REPOSITORY }}/${{ env.DOCKER_IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ vars.DOCKERHUB_REPOSITORY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.meta.outputs.version }}

  deploy:
    runs-on: ubuntu-latest
    needs: docker-merge
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Set up K8s tools
      uses: azure/setup-kubectl@v4

    - name: Install Skaffold
      run: |
        curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64
        chmod +x skaffold
        sudo mv skaffold /usr/local/bin
        skaffold config set --global collect-metrics false

    - name: Deploy to developement environment
      if: github.event_name == 'pull_request'
      run:  echo "Deploying to development"  #skaffold deploy --build-artifacts=build.json --namespaces=development

    - name: Deploy to production environment
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: echo "Deploying to production"   #skaffold deploy --build-artifacts=build.json --namespaces=production
