# deployments/kubernetes/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-service
  labels:
    app: product-service
spec:
  replicas: 3
  selector:
    matchLabels:
      app: product-service
  template:
    metadata:
      labels:
        app: product-service
    spec:
      containers:
      - name: product-service
        image: your-registry/product-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: SERVER_PORT
          value: "8080"
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              name: product-service-secrets
              key: mongodb-uri
        - name: MONGODB_DATABASE
          value: "product_service"
        - name: REDIS_ADDRESS
          value: "redis-service:6379"
        - name: RABBITMQ_URI
          valueFrom:
            secretKeyRef:
              name: product-service-secrets
              key: rabbitmq-uri
        - name: AUTH_JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: product-service-secrets
              key: jwt-secret
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
---
# deployments/kubernetes/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: product-service
  labels:
    name: product-service

---
# deployments/kubernetes/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: product-service-config
  namespace: product-service
data:
  SERVER_PORT: "8080"
  MONGODB_DATABASE: "product_service"
  REDIS_DB: "0"
  RABBITMQ_EXCHANGE: "product_exchange"
  LOG_LEVEL: "info"

---
# deployments/kubernetes/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: product-service-secrets
  namespace: product-service
type: Opaque
data:
  # Base64 encoded values
  mongodb-uri: bW9uZ29kYjovL21vbmdvZGItc2VydmljZToyNzAxNy9wcm9kdWN0X3NlcnZpY2U= # mongodb://mongodb-service:27017/product_service
  redis-password: ""
  rabbitmq-uri: YW1xcDovL2d1ZXN0Omd1ZXN0QHJhYmJpdG1xLXNlcnZpY2U6NTY3Mi8= # amqp://guest:guest@rabbitmq-service:5672/
  jwt-secret: eW91ci1zZWNyZXQta2V5 # your-secret-key

---
# deployments/kubernetes/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-service
  namespace: product-service
  labels:
    app: product-service
spec:
  replicas: 3
  selector:
    matchLabels:
      app: product-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: product-service
    spec:
      containers:
      - name: product-service
        image: your-registry/product-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: SERVER_PORT
          valueFrom:
            configMapKeyRef:
              name: product-service-config
              key: SERVER_PORT
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              name: product-service-secrets
              key: mongodb-uri
        - name: MONGODB_DATABASE
          valueFrom:
            configMapKeyRef:
              name: product-service-config
              key: MONGODB_DATABASE
        - name: REDIS_ADDRESS
          value: "redis-service:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: product-service-secrets
              key: redis-password
        - name: REDIS_DB
          valueFrom:
            configMapKeyRef:
              name: product-service-config
              key: REDIS_DB
        - name: RABBITMQ_URI
          valueFrom:
            secretKeyRef:
              name: product-service-secrets
              key: rabbitmq-uri
        - name: RABBITMQ_EXCHANGE
          valueFrom:
            configMapKeyRef:
              name: product-service-config
              key: RABBITMQ_EXCHANGE
        - name: AUTH_JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: product-service-secrets
              key: jwt-secret
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: product-service-config
              key: LOG_LEVEL
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000

---
# deployments/kubernetes/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: product-service
  namespace: product-service
  labels:
    app: product-service
spec:
  selector:
    app: product-service
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
  type: ClusterIP

---
# deployments/kubernetes/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: product-service-ingress
  namespace: product-service
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - api.yourcompany.com
    secretName: product-service-tls
  rules:
  - host: api.yourcompany.com
    http:
      paths:
      - path: /products/?(.*)
        pathType: Prefix
        backend:
          service:
            name: product-service
            port:
              number: 80

---
# deployments/kubernetes/horizontal-pod-autoscaler.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: product-service-hpa
  namespace: product-service
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: product-service
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
